// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CarList.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct CarList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cars: [Car] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Car {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var number: String {
    get {return _storage._number}
    set {_uniqueStorage()._number = newValue}
  }

  var patches: [Int32] {
    get {return _storage._patches}
    set {_uniqueStorage()._patches = newValue}
  }

  var location: Car.Location {
    get {return _storage._location ?? Car.Location()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {_uniqueStorage()._location = nil}

  var filters: [Int32] {
    get {return _storage._filters}
    set {_uniqueStorage()._filters = newValue}
  }

  var sf: [Int32] {
    get {return _storage._sf}
    set {_uniqueStorage()._sf = newValue}
  }

  var modelID: String {
    get {return _storage._modelID}
    set {_uniqueStorage()._modelID = newValue}
  }

  var telematics: Car.Telematics {
    get {return _storage._telematics ?? Car.Telematics()}
    set {_uniqueStorage()._telematics = newValue}
  }
  /// Returns true if `telematics` has been explicitly set.
  var hasTelematics: Bool {return _storage._telematics != nil}
  /// Clears the value of `telematics`. Subsequent reads from it will return its default value.
  mutating func clearTelematics() {_uniqueStorage()._telematics = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Location {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var lat: Float = 0

    var course: Int32 = 0

    var lon: Float = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Telematics {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fuelDistance: Int32 = 0

    var fuelLevel: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CarList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CarList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cars"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.cars)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cars.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cars, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CarList, rhs: CarList) -> Bool {
    if lhs.cars != rhs.cars {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Car: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Car"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "patches"),
    3: .same(proto: "location"),
    4: .same(proto: "filters"),
    5: .same(proto: "sf"),
    6: .standard(proto: "model_id"),
    7: .same(proto: "telematics"),
  ]

  fileprivate class _StorageClass {
    var _number: String = String()
    var _patches: [Int32] = []
    var _location: Car.Location? = nil
    var _filters: [Int32] = []
    var _sf: [Int32] = []
    var _modelID: String = String()
    var _telematics: Car.Telematics? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _number = source._number
      _patches = source._patches
      _location = source._location
      _filters = source._filters
      _sf = source._sf
      _modelID = source._modelID
      _telematics = source._telematics
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._number)
        case 2: try decoder.decodeRepeatedInt32Field(value: &_storage._patches)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._location)
        case 4: try decoder.decodeRepeatedInt32Field(value: &_storage._filters)
        case 5: try decoder.decodeRepeatedInt32Field(value: &_storage._sf)
        case 6: try decoder.decodeSingularStringField(value: &_storage._modelID)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._telematics)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._number.isEmpty {
        try visitor.visitSingularStringField(value: _storage._number, fieldNumber: 1)
      }
      if !_storage._patches.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._patches, fieldNumber: 2)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._filters.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._filters, fieldNumber: 4)
      }
      if !_storage._sf.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._sf, fieldNumber: 5)
      }
      if !_storage._modelID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._modelID, fieldNumber: 6)
      }
      if let v = _storage._telematics {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Car, rhs: Car) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._number != rhs_storage._number {return false}
        if _storage._patches != rhs_storage._patches {return false}
        if _storage._location != rhs_storage._location {return false}
        if _storage._filters != rhs_storage._filters {return false}
        if _storage._sf != rhs_storage._sf {return false}
        if _storage._modelID != rhs_storage._modelID {return false}
        if _storage._telematics != rhs_storage._telematics {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Car.Location: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Car.protoMessageName + ".Location"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lat"),
    2: .same(proto: "course"),
    3: .same(proto: "lon"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.lat)
      case 2: try decoder.decodeSingularInt32Field(value: &self.course)
      case 3: try decoder.decodeSingularFloatField(value: &self.lon)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lat != 0 {
      try visitor.visitSingularFloatField(value: self.lat, fieldNumber: 1)
    }
    if self.course != 0 {
      try visitor.visitSingularInt32Field(value: self.course, fieldNumber: 2)
    }
    if self.lon != 0 {
      try visitor.visitSingularFloatField(value: self.lon, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Car.Location, rhs: Car.Location) -> Bool {
    if lhs.lat != rhs.lat {return false}
    if lhs.course != rhs.course {return false}
    if lhs.lon != rhs.lon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Car.Telematics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Car.protoMessageName + ".Telematics"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fuel_distance"),
    2: .standard(proto: "fuel_level"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.fuelDistance)
      case 2: try decoder.decodeSingularInt32Field(value: &self.fuelLevel)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.fuelDistance != 0 {
      try visitor.visitSingularInt32Field(value: self.fuelDistance, fieldNumber: 1)
    }
    if self.fuelLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.fuelLevel, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Car.Telematics, rhs: Car.Telematics) -> Bool {
    if lhs.fuelDistance != rhs.fuelDistance {return false}
    if lhs.fuelLevel != rhs.fuelLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
